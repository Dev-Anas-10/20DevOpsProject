pipeline {
    agent any

    tools {
        maven "MAVEN3.9"
        jdk "JDK11"
    }

    environment {
        SNAP_REPO = 'myproject-snapshot'
        CENTRAL_REPO = 'myproject-dep'
        NEXUS_GRP_REPO = 'myproject-group'
        NEXUS_USER = 'admin'
        NEXUS_PASS = 'admin'
        SONAR_SERVER = 'sonarserver'
        SONAR_SCANNER = 'sonarscanner'
        NEXUS_CREDENTIALS_ID = 'nexuslogin'
        NEXUS_URL = '192.168.100.22:8081'
        RELEASE_REPO = 'myproject-release'
        GROUP_ID = 'QA'
        ARTIFACT_ID = 'vproapp'
        PACKAGING = 'war'
        VERSION = "1.0.${env.BUILD_ID}-${env.BUILD_TIMESTAMP}"
        SLACK_CHANNEL = '#test' // Specify your Slack channel
        SLACK_CREDENTIALS_ID = 'slacktoken' // Specify your Slack credentials ID
    }

    stages {
        stage('Build') {
            steps {
                script {
                    sh 'mvn -s settings.xml -DskipTests install'
                }
            }
            post {
                success {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Build was successful! :white_check_mark:")
                }
                failure {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Build failed! :x:")
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    sh 'mvn -s settings.xml test'
                }
            }
            post {
                success {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Tests passed successfully! :white_check_mark:")
                }
                failure {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Tests failed! :x:")
                }
            }
        }

        stage('INTEGRATION TEST'){
            steps {
                sh 'mvn -s settings.xml verify -DskipUnitTests'
            }
            post {
                success {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Integration tests passed! :white_check_mark:")
                }
                failure {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Integration tests failed! :x:")
                }
            }
        }
		
        stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
            post {
                success {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Checkstyle code analysis passed! :white_check_mark:")
                }
                failure {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Checkstyle code analysis failed! :x:")
                }
            }
        }

        stage('CODE ANALYSIS with SONARQUBE') {
          
          environment {
             scannerHome = tool "${SONAR_SCANNER}"
          }

          steps {
            withSonarQubeEnv("${SONAR_SERVER}") {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }
          }
          post {
              success {
                  slackSend(channel: "${SLACK_CHANNEL}", message: "SonarQube code analysis completed successfully! :white_check_mark:")
              }
              failure {
                  slackSend(channel: "${SLACK_CHANNEL}", message: "SonarQube code analysis failed! :x:")
              }
          }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: "${NEXUS_URL}",
                    groupId: "${GROUP_ID}",
                    version: "${VERSION}",
                    repository: "${RELEASE_REPO}",
                    credentialsId: "${NEXUS_CREDENTIALS_ID}",
                    artifacts: [
                        [
                            artifactId: "${ARTIFACT_ID}",
                            classifier: '',
                            file: 'target/vprofile-v2.war',
                            type: "${PACKAGING}"
                        ]
                    ]
                )
            }
            post {
                success {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Artifact successfully uploaded to Nexus! :white_check_mark:")
                }
                failure {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Artifact upload to Nexus failed! :x:")
                }
            }
        }

        stage('Docker Compose Up') {
            steps {
                script {
                    // Using a custom docker-compose file
                    sh 'docker-compose -f up -d'
                }
            }
            post {
                success {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Docker Compose containers are up! :white_check_mark:")
                }
                failure {
                    slackSend(channel: "${SLACK_CHANNEL}", message: "Docker Compose failed! :x:")
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

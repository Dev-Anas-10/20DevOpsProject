name: Test & Build and Deploy Pipeline

# Trigger the workflow on pushes to the specified branch
on:
  workflow_dispatch: # Manual trigger

jobs:
  Test:
    runs-on: ubuntu-latest

    env: # Global environment variables
      SONAR_URL: "https://sonarcloud.io"
      SONAR_PROJECT_KEY: "githubactions10" # Replace with your SonarCloud project key
      SONAR_ORGANIZATION: "githubactions10" # Replace with your SonarCloud organization
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up JDK
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Run Maven Test
    - name: Maven Test
      run: mvn test

    # Run Maven Checkstyle
    - name: Maven Checkstyle
      run: mvn checkstyle:checkstyle

    # Run Maven Install
    - name: Maven Install
      run: mvn install

    # Setup sonar-scanner
    - name: Setup SonarQube
      uses: warchant/setup-sonar-scanner@v8

    # Run sonar-scanner
    - name: SonarQube Scan
      run: sonar-scanner
           -Dsonar.host.url=${{ env.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath=target/surefire-reports/
           -Dsonar.jacoco.reportsPath=target/jacoco.exec
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       SONAR_HOST_URL: ${{ env.SONAR_URL }} 



  build-and-deploy:
    runs-on: ubuntu-latest
    needs: Test
    
    env: # Global environment variables
      REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      # Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update App config file
      env:
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PASS: ${{ secrets.DB_PASS }}
        DB_USER: ${{ secrets.DB_USER }}
      run: |
        sed -i 's/db01/${{ secrets.DB_NAME }}/g' src/main/resources/application.properties
        sed -i 's|^jdbc.username=.*|jdbc.username=${{ secrets.DB_USER }}|g' src/main/resources/application.properties
        sed -i 's|^jdbc.password=.*|jdbc.password=${{ secrets.DB_PASS }}|g' src/main/resources/application.properties
        
    - name: upload image to ECR
      env:
        REPO: "app"
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.registry }}
        repo: ${{ env.REPO }}
        region: ${{ env.REGION }}
        tags: "latest,${{ github.run_number }}"
        daemon_off: false
        dockerfile: Dockerfile
        context: ./Dockerfiles/app

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

      # Deploy to Amazon ECS
    - name: Fill in the new image ID in the Amazon ECS task definition
      env:
        container-name: "app"
        REPOSTRY: "app"
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.container-name }}
        image: ${{ secrets.registry }}/${{ env.REPOSTRY }}:${{ github.run_number }}

    - name: Deploy Amazon ECS task definition
      env:
        ECS_SERVICE: ""
        ECS_CLUSTER: ""
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
